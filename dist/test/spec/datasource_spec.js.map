{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","beforeEach","$q","Q","backendSrv","templateSrv","jsonData","mongodb_url","mongodb_db","ds","Datasource","it","done","query","targets","then","result","expect","data","to","have","length","datasourceRequest","request","when","_request","target","datapoints","replace","db","url","equal","series","metricFindQuery","text","value","mapToTextValue","a","b"],"mappings":"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","file":"datasource_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\n\ndescribe('GenericDatasource', function() {\n    var ctx = {};\n\n    beforeEach(function() {\n        ctx.$q = Q;\n        ctx.backendSrv = {};\n        ctx.templateSrv = {};\n        var jsonData = { mongodb_url : 'mongodb://localhost:27017', mongodb_db : 'test_db' }\n        ctx.ds = new Datasource({jsonData : jsonData}, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n    });\n\n    it('should return an empty array when no targets are set', function(done) {\n        ctx.ds.query({targets: []}).then(function(result) {\n            expect(result.data).to.have.length(0);\n            done();\n        });\n    });\n\n    it('should return the server results when a target is set', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: [\n                    {\n                        target: 'X',\n                        datapoints: [1, 2, 3]\n                    }\n                ]\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n          return data;\n        }\n\n        ctx.ds.query({targets: ['hits']}).then(function(result) {\n            expect(result._request.data.targets).to.have.length(1);\n            expect(result._request.data.db.url).to.equal('mongodb://localhost:27017');\n            expect(result._request.data.db.db).to.equal('test_db');\n\n            var series = result.data[0];\n            expect(series.target).to.equal('X');\n            expect(series.datapoints).to.have.length(3);\n            done();\n        });\n    });\n\n    it ('should return the metric results when a target is null', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: [\n                    \"metric_0\",\n                    \"metric_1\",\n                    \"metric_2\",\n                ]\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery({target: null}).then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('metric_0');\n            expect(result[0].value).to.equal('metric_0');\n            expect(result[1].text).to.equal('metric_1');\n            expect(result[1].value).to.equal('metric_1');\n            expect(result[2].text).to.equal('metric_2');\n            expect(result[2].value).to.equal('metric_2');\n            done();\n        });\n    });\n\n    it ('should return the metric target results when a target is set', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            var target = request.data.target;\n            var result = [target + \"_0\", target + \"_1\", target + \"_2\"];\n\n            return ctx.$q.when({\n                _request: request,\n                data: result\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery('search').then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('search_0');\n            expect(result[0].value).to.equal('search_0');\n            expect(result[1].text).to.equal('search_1');\n            expect(result[1].value).to.equal('search_1');\n            expect(result[2].text).to.equal('search_2');\n            expect(result[2].value).to.equal('search_2');\n            done();\n        });\n    });\n\n    it ('should return the metric results when the target is an empty string', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: [\n                    \"metric_0\",\n                    \"metric_1\",\n                    \"metric_2\",\n                ]\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery('').then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('metric_0');\n            expect(result[0].value).to.equal('metric_0');\n            expect(result[1].text).to.equal('metric_1');\n            expect(result[1].value).to.equal('metric_1');\n            expect(result[2].text).to.equal('metric_2');\n            expect(result[2].value).to.equal('metric_2');\n            done();\n        });\n    });\n\n    it ('should return the metric results when the args are an empty object', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: [\n                    \"metric_0\",\n                    \"metric_1\",\n                    \"metric_2\",\n                ]\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery().then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('metric_0');\n            expect(result[0].value).to.equal('metric_0');\n            expect(result[1].text).to.equal('metric_1');\n            expect(result[1].value).to.equal('metric_1');\n            expect(result[2].text).to.equal('metric_2');\n            expect(result[2].value).to.equal('metric_2');\n            done();\n        });\n    });\n\n    it ('should return the metric target results when the args are a string', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            var target = request.data.target;\n            var result = [target + \"_0\", target + \"_1\", target + \"_2\"];\n\n            return ctx.$q.when({\n                _request: request,\n                data: result\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n            return data;\n        }\n\n        ctx.ds.metricFindQuery('search').then(function(result) {\n            expect(result).to.have.length(3);\n            expect(result[0].text).to.equal('search_0');\n            expect(result[0].value).to.equal('search_0');\n            expect(result[1].text).to.equal('search_1');\n            expect(result[1].value).to.equal('search_1');\n            expect(result[2].text).to.equal('search_2');\n            expect(result[2].value).to.equal('search_2');\n            done();\n        });\n    });\n\n    it ('should return data as text and as value', function(done) {\n        var result = ctx.ds.mapToTextValue({data: [\"zero\", \"one\", \"two\"]});\n\n        expect(result).to.have.length(3);\n        expect(result[0].text).to.equal('zero');\n        expect(result[0].value).to.equal('zero');\n        expect(result[1].text).to.equal('one');\n        expect(result[1].value).to.equal('one');\n        expect(result[2].text).to.equal('two');\n        expect(result[2].value).to.equal('two');\n        done();\n    });\n\n    it ('should return text as text and value as value', function(done) {\n        var data = [\n            {text: \"zero\", value: \"value_0\"},\n            {text: \"one\", value: \"value_1\"},\n            {text: \"two\", value: \"value_2\"},\n        ];\n\n        var result = ctx.ds.mapToTextValue({data: data});\n\n        expect(result).to.have.length(3);\n        expect(result[0].text).to.equal('zero');\n        expect(result[0].value).to.equal('value_0');\n        expect(result[1].text).to.equal('one');\n        expect(result[1].value).to.equal('value_1');\n        expect(result[2].text).to.equal('two');\n        expect(result[2].value).to.equal('value_2');\n        done();\n    });\n\n    it ('should return data as text and index as value', function(done) {\n        var data = [\n            {a: \"zero\", b: \"value_0\"},\n            {a: \"one\", b: \"value_1\"},\n            {a: \"two\", b: \"value_2\"},\n        ];\n\n        var result = ctx.ds.mapToTextValue({data: data});\n\n        expect(result).to.have.length(3);\n        expect(result[0].text).to.equal(data[0]);\n        expect(result[0].value).to.equal(0);\n        expect(result[1].text).to.equal(data[1]);\n        expect(result[1].value).to.equal(1);\n        expect(result[2].text).to.equal(data[2]);\n        expect(result[2].value).to.equal(2);\n        done();\n    });\n});\n"]}